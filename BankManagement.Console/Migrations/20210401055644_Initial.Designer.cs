// <auto-generated />
using Bank;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank.Console.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20210401055644_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bank.Bank", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Bank.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BankId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExcahngeRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId1");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Bank.ServiceChargeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("OtherBankIMPS")
                        .HasColumnType("float");

                    b.Property<double>("OtherBankRTGS")
                        .HasColumnType("float");

                    b.Property<double>("SameBankIMPS")
                        .HasColumnType("float");

                    b.Property<double>("SameBankRTGS")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BankId")
                        .IsUnique()
                        .HasFilter("[BankId] IS NOT NULL");

                    b.ToTable("ServiceCharges");
                });

            modelBuilder.Entity("Bank.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountHolderId")
                        .HasColumnType("int");

                    b.Property<string>("AccountHolderId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestBankID")
                        .HasColumnType("int");

                    b.Property<string>("SrcAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrcBankID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountHolderId1");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Bank.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Bank.AccountHolder", b =>
                {
                    b.HasBaseType("Bank.User");

                    b.Property<double>("AvailableBalance")
                        .HasColumnType("float");

                    b.HasIndex("BankId");

                    b.HasDiscriminator().HasValue("AccountHolder");
                });

            modelBuilder.Entity("Bank.BankStaff", b =>
                {
                    b.HasBaseType("Bank.User");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BankId")
                        .HasName("IX_Users_BankId1");

                    b.HasDiscriminator().HasValue("BankStaff");
                });

            modelBuilder.Entity("Bank.Currency", b =>
                {
                    b.HasOne("Bank.Bank", "Bank")
                        .WithMany("Currencies")
                        .HasForeignKey("BankId1");
                });

            modelBuilder.Entity("Bank.ServiceChargeRates", b =>
                {
                    b.HasOne("Bank.Bank", "Bank")
                        .WithOne("ServiceChargeRates")
                        .HasForeignKey("Bank.ServiceChargeRates", "BankId");
                });

            modelBuilder.Entity("Bank.Transaction", b =>
                {
                    b.HasOne("Bank.AccountHolder", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountHolderId1");
                });

            modelBuilder.Entity("Bank.AccountHolder", b =>
                {
                    b.HasOne("Bank.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("Bank.BankStaff", b =>
                {
                    b.HasOne("Bank.Bank", "Bank")
                        .WithMany("Employees")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_Users_Banks_BankId1");
                });
#pragma warning restore 612, 618
        }
    }
}
